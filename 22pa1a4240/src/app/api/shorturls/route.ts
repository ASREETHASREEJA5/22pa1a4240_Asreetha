// This is an autogenerated file from Firebase Studio.

import { type NextRequest, NextResponse } from 'next/server';
import { findUrlByShortcode, saveUrl } from '@/services/url-service';
import type { ShortenedUrl } from '@/types';

async function generateUniqueShortcode(): Promise<string> {
    let shortcode = '';
    do {
      shortcode = Math.random().toString(36).substring(2, 8);
    } while (findUrlByShortcode(shortcode));
    return shortcode;
}

export async function POST(req: NextRequest) {
    try {
        const body = await req.json();

        const { url: longUrl, validity, shortcode: customShortcode } = body;

        if (!longUrl || typeof longUrl !== 'string') {
            return NextResponse.json({ error: 'The "url" field is required and must be a string.' }, { status: 400 });
        }
        try {
            new URL(longUrl);
        } catch (e) {
            return NextResponse.json({ error: 'The "url" field must be a valid URL.' }, { status: 400 });
        }

        if (validity && (typeof validity !== 'number' || !Number.isInteger(validity) || validity <= 0)) {
            return NextResponse.json({ error: 'The "validity" field must be a positive integer.' }, { status: 400 });
        }

        if (customShortcode && (typeof customShortcode !== 'string' || !/^[a-zA-Z0-9-]*$/.test(customShortcode))) {
            return NextResponse.json({ error: 'The "shortcode" can only contain letters, numbers, and dashes.' }, { status: 400 });
        }

        let shortcode = customShortcode;
        if (shortcode) {
             if (findUrlByShortcode(shortcode)) {
                return NextResponse.json({ error: `The shortcode "${shortcode}" is already in use.` }, { status: 409 });
            }
        } else {
            shortcode = await generateUniqueShortcode();
        }

        const now = new Date();
        const validityMinutes = validity || 30;
        const expiresAt = new Date(now.getTime() + validityMinutes * 60000);

        const origin = req.nextUrl.origin;

        const newUrl: ShortenedUrl = {
            id: crypto.randomUUID(),
            longUrl: longUrl,
            shortcode,
            shortUrl: `${origin}/${shortcode}`,
            createdAt: now.toISOString(),
            expiresAt: expiresAt.toISOString(),
            clicks: 0,
            clickData: [],
        };

        saveUrl(newUrl);

        return NextResponse.json(
            {
                shortLink: newUrl.shortUrl,
                expiry: newUrl.expiresAt,
            },
            { status: 201 }
        );

    } catch (error) {
        console.error('Error creating short URL:', error);
        return NextResponse.json({ error: 'An unexpected error occurred.' }, { status: 500 });
    }
}
